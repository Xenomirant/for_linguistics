VECTORS

https://rdrr.io/snippets/
class(my_var)

poker_vector <- c(140, -50, 20, -120, 240)
total_poker <- sum(poker_vector)
# Calculate the average
mean(poker_vektor)

names(poker_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
poker_Monday <- poker_vector[1]
poker_midweek <- poker_vector[c(2, 3, 4)] / poker_vector[2:4]
poker_start <- poker_vector[c("Monday","Tuesday", "Wednesday")]
  
poker_vector <- c(140, -50, 20, -120, 240)
selection_vector <- poker_vector > 0
   Monday   Tuesday Wednesday  Thursday    Friday 
     TRUE     FALSE      TRUE     FALSE      TRUE
poker_winning_days <- poker_vector[selection_vector] 
   Monday Wednesday    Friday 
      140        20       240

matrix(1:9, byrow = TRUE, nrow = 3)
     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6
[3,]    7    8    9
______________________________________________________________________________________________________

MATRICES

new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
star_wars_matrix <- matrix(c(new_hope, empire_strikes, return_jedi), nrow = 3, byrow = TRUE)

region <- c("US", "non-US")
titles <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
colnames(star_wars_matrix) <- region
rownames(star_wars_matrix) <- titles
                             US non-US
A New Hope              460.998  314.4
The Empire Strikes Back 290.475  247.9
Return of the Jedi      309.306  165.8

worldwide_vector <- rowSums(star_wars_matrix)
             A New Hope The Empire Strikes Back      Return of the Jedi 
                775.398                 538.375                 475.106
                
all_wars_matrix <- cbind(star_wars_matrix, worldwide_vector)
                             US non-US worldwide_vector
A New Hope              460.998  314.4          775.398
The Empire Strikes Back 290.475  247.9          538.375
Return of the Jedi      309.306  165.8          475.106

#Combine two matrices in one
all_wars_matrix <- rbind(star_wars_matrix, star_wars_matrix2)

# my_matrix[,1] selects all elements of the first column.
# my_matrix[1,] selects all elements of the first row.

two_films_non_us <- all_wars_matrix[1:2,2]
             A New Hope The Empire Strikes Back 
                  314.4                   247.9
visitors <- all_wars_matrix / ticket_prices_matrix 
______________________________________________________________________________________________________

FACTORS

sex_vector <- c("Male", "Female", "Female", "Male", "Male")
factor_sex_vector <- factor(sex_vector)
factor_sex_vector
[1] Male   Female Female Male   Male  
Levels: Female Male

nominal variables <- ("Yakutsk", "Irkutsk", "Krasnoyarsk")
ordinal variables <- c("High", "Low", "High","Low", "Medium")
factor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c("Low", "Medium", "High"))
> factor_temperature_vector
[1] High   Low    High   Low    Medium
Levels: Low < Medium < High

survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
levels(factor_survey_vector) <- c("Female", "Male")
factor_survey_vector
[1] Male   Female Female Male   Male  
Levels: Female Male

summary(factor_survey_vector)
Female   Male 
     2      3
     
speed_vector <- c("medium", "slow", "slow", "medium", "fast")
factor_speed_vector <- factor(speed_vector, ordered = TRUE, levels =c("slow", "medium", "fast"))
factor_speed_vector
[1] medium slow   slow   medium fast  
Levels: slow < medium < fast
summary(factor_speed_vector)
  slow medium   fast 
     2      2      1
______________________________________________________________________________________________________

DATA FRAMES

head(mtcars)
tail(mtcars)
str(mtcars)

name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet", 
          "Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)

planets_df <- data.frame(name, type, diameter, rotation, rings)
planets_df
8 observations of  5 variables
     name               type diameter rotation rings
1 Mercury Terrestrial planet    0.382    58.64 FALSE
2   Venus Terrestrial planet    0.949  -243.02 FALSE
3   Earth Terrestrial planet    1.000     1.00 FALSE
4    Mars Terrestrial planet    0.532     1.03 FALSE
5 Jupiter          Gas giant   11.209     0.41  TRUE
6  Saturn          Gas giant    9.449     0.43  TRUE
7  Uranus          Gas giant    4.007    -0.72  TRUE
8 Neptune          Gas giant    3.883     0.67  TRUE


# my_df[1:3,2:4] selects rows 1, 2, 3 and columns 2, 3, 4 
# Print out diameter of Mercury (row 1, column 3)
planets_df[1,3]
# Print out data for Mars (entire fourth row)
planets_df[4, ]
# Select first 5 values of diameter column
planets_df[1:5,"diameter"]
# Select all elements of the variable diameter
planets_df$diameter

planets_df[rings_vector, "name"]
[1] Jupiter Saturn  Uranus  Neptune
planets_df[rings_vector, ]
# данные всех колонок

subset(planets_df, subset = diameter < 1)
subset(planets_df, subset = rings)

a <- c(50, -1, 0, 100)
order(a)
2 3 1 4
a[order(a)]
-1   0  50 100


# Use order() to create positions
positions <- order(planets_df$diameter)
# Use positions to sort planets_df
positions[order(positions)]
planets_df[positions, ]

name               type diameter rotation rings
1 Mercury Terrestrial planet    0.382    58.64 FALSE
4    Mars Terrestrial planet    0.532     1.03 FALSE
2   Venus Terrestrial planet    0.949  -243.02 FALSE
3   Earth Terrestrial planet    1.000     1.00 FALSE
8 Neptune          Gas giant    3.883     0.67  TRUE
7  Uranus          Gas giant    4.007    -0.72  TRUE
6  Saturn          Gas giant    9.449     0.43  TRUE
5 Jupiter          Gas giant   11.209     0.41  TRUE
______________________________________________________________________________________________________
LISTS

my_list <- list(vec = my_vector, mat = my_matrix, df = my_df)
shining_list$actors[2]

LOGIC OPERATORS

# Is last under 5 or above 10?
last < 5 | last > 10
# linkedin exceeds 10 but facebook below 10
linkedin > 10 & facebook < 10 
# When were one or both visited at least 12 times?
facebook >= 12 | linkedin >= 12
# Is last between 15 (exclusive) and 20 (inclusive)?
15 < last & last >= 20
# When is views between 11 (exclusive) and 14 (inclusive)?
11 < views & views <= 14

# Select the second column, named day2, from li_df: second
second <- li_df[,"day2"]
# Build a logical vector, TRUE if value in second is extreme: extremes
extremes <- c(second > 25 | second < 5)
# Count the number of TRUEs in extremes
sum(extremes)
